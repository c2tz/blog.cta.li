{"config":{"lang":["fr"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Blog","text":""},{"location":"#blog","title":"Blog","text":""},{"location":"2024/03/07/code-blocks/","title":"Code blocks","text":""},{"location":"2024/03/07/code-blocks/#code-blocks","title":"Code blocks","text":"<p>Code blocks and examples are an essential part of technical project documentation. Material for MkDocs provides different ways to set up syntax highlighting for code blocks, either during build time using Pygments or during runtime using a JavaScript syntax highlighter. </p>"},{"location":"2024/03/07/code-blocks/#configuration","title":"Configuration","text":"<p>This configuration enables syntax highlighting on code blocks and inline code blocks, and allows to include source code directly from other files. Add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.superfences\n</code></pre> <p>The following sections discuss how to use different syntax highlighting features with Pygments, the recommended highlighter, so they don't apply when using a JavaScript syntax highlighter.</p> <p>See additional configuration options:</p> <ul> <li>Highlight</li> <li>InlineHilite</li> <li>SuperFences</li> <li>Snippets</li> </ul>"},{"location":"2024/03/07/code-blocks/#code-copy-button","title":"Code copy button","text":"<p>Code blocks can automatically render a button on the right side to allow the user to copy a code block's contents to the clipboard. Add the following to <code>mkdocs.yml</code> to enable them globally:</p> <pre><code>theme:\n  features:\n    - content.code.copy\n</code></pre> Enabling or disabling code copy buttons for a specific code block <p>If you don't want to enable code copy buttons globally, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension:</p> <pre><code>``` { .yaml .copy }\n# Code block content\n```\n</code></pre> <p>Note that there must be a language shortcode, which has to come first and must also be prefixed by a <code>.</code>. Similarly, the copy button can also be disabled for a specific code block:</p> <pre><code>``` { .yaml .no-copy }\n# Code block content\n```\n</code></pre> <p>To enable or disable the copy button without syntax highlighting, you can use the <code>.text</code> language shortcode, which doesn't highlight anything.</p>"},{"location":"2024/03/07/code-blocks/#code-selection-button","title":"Code selection button","text":"<p>Code blocks can include a button to allow for the selection of line ranges by the user, which is perfect for linking to a specific subsection of a code block. This allows the user to apply line highlighting dynamically. Add the following to <code>mkdocs.yml</code> to enable it globally:</p> <pre><code>theme:\n  features:\n    - content.code.select\n</code></pre> Enabling or disabling code selection buttons for a specific code block <p>If you don't want to enable code selection buttons globally, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension:</p> <pre><code>``` { .yaml .select }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be prefixed by a <code>.</code>. Similarly, the selection button can also be disabled for a specific code block:</p> <pre><code>``` { .yaml .no-select }\n# Code block content\n```\n</code></pre>"},{"location":"2024/03/07/code-blocks/#code-annotations","title":"Code annotations","text":"<p>Code annotations offer a comfortable and friendly way to attach arbitrary content to specific sections of code blocks by adding numeric markers in block and inline comments in the language of the code block. Add the following to <code>mkdocs.yml</code> to enable them globally:</p> <pre><code>theme:\n  features:\n    - content.code.annotate # (1)!\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol> Enabling code annotations for a specific code block <p>If you don't want to enable code annotations globally, because you don't like the automatic inlining behavior, you can enable them for a specific code block by using a slightly different syntax based on the Attribute Lists extension:</p> <pre><code>``` { .yaml .annotate }\n# Code block content\n```\n</code></pre> <p>Note that the language shortcode which has to come first must now also be prefixed by a <code>.</code>.</p>"},{"location":"2024/03/07/code-blocks/#custom-selectors","title":"Custom selectors","text":"<p>Normally, code annotations can only be placed in comments, as comments can be considered safe for placement. However, sometimes it might be necessary to place annotations in parts of the code block where comments are not allowed, e.g. in strings.</p> <p>Additional selectors can be set per-language:</p> <pre><code>extra:\n  annotate:\n    json: [.s2] # (1)!\n</code></pre> <ol> <li> <p><code>.s2</code> is the name of the lexeme that Pygments generates for double-quoted     strings. If you want to use a code annotation in another lexeme than a     comment, inspect the code block and determine which lexeme needs to be added     to the list of additional selectors.</p> <p>Important: Code annotations cannot be split between lexemes.</p> </li> </ol> <p>Now, code annotations can be used from within strings in JSON:</p> <pre><code>{\n  \"key\": \"value (1)\"\n}\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"2024/03/07/code-blocks/#usage","title":"Usage","text":"<p>Code blocks must be enclosed with two separate lines containing three backticks. To add syntax highlighting to those blocks, add the language shortcode directly after the opening block. See the list of available lexers to find the shortcode for a given language:</p> Code block<pre><code>``` py\nimport tensorflow as tf\n```\n</code></pre> <pre><code>import tensorflow as tf\n</code></pre>"},{"location":"2024/03/07/code-blocks/#adding-a-title","title":"Adding a title","text":"<p>In order to provide additional context, a custom title can be added to a code block by using the <code>title=\"&lt;custom title&gt;\"</code> option directly after the shortcode, e.g. to display the name of a file:</p> Code block with title<pre><code>``` py title=\"bubble_sort.py\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"2024/03/07/code-blocks/#adding-annotations","title":"Adding annotations","text":"<p>Code annotations can be placed anywhere in a code block where a comment for the language of the block can be placed, e.g. for JavaScript in <code>// ...</code> and <code>/* ... */</code>, for YAML in <code># ...</code>, etc.<sup>1</sup>:</p> Code block with annotation<pre><code>``` yaml\ntheme:\n  features:\n    - content.code.annotate # (1)\n```\n\n1.  :man_raising_hand: I'm a code annotation! I can contain `code`, __formatted\n    text__, images, ... basically anything that can be written in Markdown.\n</code></pre> <pre><code>theme:\n  features:\n    - content.code.annotate # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol>"},{"location":"2024/03/07/code-blocks/#stripping-comments","title":"Stripping comments","text":"<p>If you wish to strip the comment characters surrounding a code annotation, simply add an <code>!</code> after the closing parenthesis of the code annotation:</p> Code block with annotation, stripped<pre><code>``` yaml\n# (1)!\n```\n\n1.  Look ma, less line noise!\n</code></pre> <pre><code># (1)!\n</code></pre> <ol> <li>Look ma, less line noise!</li> </ol> <p>Note that this only allows for a single code annotation to be rendered per comment. If you want to add multiple code annotations, comments cannot be stripped for technical reasons.</p>"},{"location":"2024/03/07/code-blocks/#adding-line-numbers","title":"Adding line numbers","text":"<p>Line numbers can be added to a code block by using the <code>linenums=\"&lt;start&gt;\"</code> option directly after the shortcode, whereas <code>&lt;start&gt;</code> represents the starting line number. A code block can start from a line number other than <code>1</code>, which allows to split large code blocks for readability:</p> Code block with line numbers<pre><code>``` py linenums=\"1\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"2024/03/07/code-blocks/#highlighting-specific-lines","title":"Highlighting specific lines","text":"<p>Specific lines can be highlighted by passing the line numbers to the <code>hl_lines</code> argument placed right after the language shortcode. Note that line counts start at <code>1</code>, regardless of the starting line number specified as part of <code>linenums</code>:</p> LinesLine ranges Code block with highlighted lines<pre><code>``` py hl_lines=\"2 3\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> Code block with highlighted line range<pre><code>``` py hl_lines=\"3-5\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"2024/03/07/code-blocks/#highlighting-inline-code-blocks","title":"Highlighting inline code blocks","text":"<p>When InlineHilite is enabled, syntax highlighting can be applied to inline code blocks by prefixing them with a shebang, i.e. <code>#!</code>, directly followed by the corresponding language shortcode.</p> Inline code block<pre><code>The `#!python range()` function is used to generate a sequence of numbers.\n</code></pre> <p>The <code>range()</code> function is used to generate a sequence of numbers.</p>"},{"location":"2024/03/07/code-blocks/#embedding-external-files","title":"Embedding external files","text":"<p>When Snippets is enabled, content from other files (including source files) can be embedded by using the <code>--8&lt;--</code> notation directly from within a code block:</p> Code block with external content<pre><code>``` title=\".browserslistrc\"\n--8&lt;-- \".browserslistrc\"\n```\n</code></pre> .browserslistrc<pre><code>last 4 years\n</code></pre>"},{"location":"2024/03/07/code-blocks/#customization","title":"Customization","text":""},{"location":"2024/03/07/code-blocks/#custom-syntax-theme","title":"Custom syntax theme","text":"<p>If Pygments is used, Material for MkDocs provides the styles for code blocks, which are built with a custom and well-balanced palette that works equally well for both color schemes:</p> <ul> <li> <code>--md-code-hl-number-color</code></li> <li> <code>--md-code-hl-special-color</code></li> <li> <code>--md-code-hl-function-color</code></li> <li> <code>--md-code-hl-constant-color</code></li> <li> <code>--md-code-hl-keyword-color</code></li> <li> <code>--md-code-hl-string-color</code></li> <li> <code>--md-code-hl-name-color</code></li> <li> <code>--md-code-hl-operator-color</code></li> <li> <code>--md-code-hl-punctuation-color</code></li> <li> <code>--md-code-hl-comment-color</code></li> <li> <code>--md-code-hl-generic-color</code></li> <li> <code>--md-code-hl-variable-color</code></li> </ul> <p>Code block foreground, background and line highlight colors are defined via:</p> <ul> <li> <code>--md-code-fg-color</code></li> <li> <code>--md-code-bg-color</code></li> <li> <code>--md-code-hl-color</code></li> </ul> <p>Let's say you want to change the color of <code>\"strings\"</code>. While there are several types of string tokens, they use the same color. You can assign a new color by using an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root &gt; * {\n  --md-code-hl-string-color: #0FF1CE;\n}\n</code></pre> <pre><code>extra_css:\n  - stylesheets/extra.css\n</code></pre> <p>If you want to tweak a specific type of string, e.g. <code>`backticks`</code>, you can lookup the specific CSS class name in the syntax theme definition, and override it as part of your additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>.highlight .sb {\n  color: #0FF1CE;\n}\n</code></pre> <pre><code>extra_css:\n  - stylesheets/extra.css\n</code></pre>"},{"location":"2024/03/07/code-blocks/#annotation-tooltip-width","title":"Annotation tooltip width","text":"<p>If you have a lot of content hosted inside your code annotations, it can be a good idea to increase the width of the tooltip by adding the following as part of an additional style sheet:</p> <code>docs/stylesheets/extra.css</code> <code>mkdocs.yml</code> <pre><code>:root {\n  --md-tooltip-width: 600px;\n}\n</code></pre> <pre><code>extra_css:\n  - stylesheets/extra.css\n</code></pre> <p>This will render annotations with a larger width:</p> <pre><code># (1)!\n</code></pre> <ol> <li>Muuuuuuuuuuuuuuuch more space for content</li> </ol> <ol> <li> <p>Code annotations require syntax highlighting with Pygments \u2013 they're currently not compatible with JavaScript syntax highlighters, or languages that do not have comments in their grammar. However, we're actively working on supporting alternate ways of defining code annotations, allowing to always place code annotations at the end of lines.\u00a0\u21a9</p> </li> </ol>"},{"location":"archive/2024/","title":"2024","text":""},{"location":"archive/2024/#2024","title":"2024","text":""},{"location":"category/staging/","title":"Staging","text":""},{"location":"category/staging/#staging","title":"Staging","text":""}]}